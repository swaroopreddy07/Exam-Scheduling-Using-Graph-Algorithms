/*
 **************************** DO NOT EDIT THIS FILE ****************************
 ************ ANY CHANGES MADE WILL BE DISCARDED BEFORE EVALUATION *************
 */

#include <iostream>
#include "graph.hpp"
#include <bits/stdc++.h>
/*******************************************************************************/

adjList::adjList(int n) {
	size = n;
	A = new edgeList* [n];
	for (int i = 0; i < n; i++) {
		A[i] = new edgeList();
	}
}
void adjList::addEdge(int source, edge* e) {
	A[source]->addNode(new edgeNode(e));
}


/****************************************************************************************/

adjMatrix::adjMatrix(int n) {
	size = n;
	M = new edge** [n];
	for(int i = 0; i < n; i++) {
		M[i] = new edge* [n];
		for(int j = 0; j < n; j++) {
			M[i][j] = NULL;
		}
	} 
}
void adjMatrix::addEdge(edge* e) {
	M[e->getSource()->getId()][e->getDest()->getId()] = e;
}

/****************************************************************************************/

graph::graph(int n) {
	this->n = n;

	this->VA = (vertex**) malloc (n * sizeof(vertex*)); 
	for(int i = 0; i < n; i++) {
		VA[i] = new vertex(i);
	}
}


vertex* graph::getVertex(int id) {
	return VA[id];
}

/****************************************************************************************/

// derived class constructor calling base class constructor
adjListGraph::adjListGraph( int n) : graph(n) {
	AL = new adjList(n);
}
void adjListGraph::addEdge(int source, int dest) {
	vertex* s = getVertex(source);
	vertex* t = getVertex(dest);
	edge* e = new edge(s, t);
	AL->addEdge(source, e);	
	edge* r = new edge(t, s);
	AL->addEdge(dest, r);
	
}


/****************************************************************************************/

// derived class constructor calling base class constructor
adjMatrixGraph::adjMatrixGraph(int n) : graph(n) {
	AM = new adjMatrix(n);
}
void adjMatrixGraph::addEdge(int i, int j) {
	vertex* source = getVertex(i);
	vertex* dest = getVertex(j);
	AM->addEdge(new edge(source, dest));	
	AM->addEdge(new edge(dest, source));
	
}


/************************************************************************************/


// Constructor implementation (keep only one definition)
edgeListGraph::edgeListGraph(int n) : graph(n) {
    E = new edgeList(); // create an empty edge list to be populated later
}


void edgeListGraph:: addEdge(int source,int dest){
	vertex* s = getVertex(source);
    vertex* d = getVertex(dest);
	 edge* e = new edge(s, d); 
	 E->addNode(new edgeNode(e));	 
    edge* r = new edge(d, s);
    E->addNode(new edgeNode(r));
    
}

